// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"gorm.io/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set CardQuerySet

// CardQuerySet is an queryset type for Card
type CardQuerySet struct {
	db *gorm.DB
}

// NewCardQuerySet constructs new CardQuerySet
func NewCardQuerySet(db *gorm.DB) CardQuerySet {
	return CardQuerySet{
		db: db.Model(&Card{}),
	}
}

func (qs CardQuerySet) w(db *gorm.DB) CardQuerySet {
	return NewCardQuerySet(db)
}

func (qs CardQuerySet) Select(fields ...CardDBSchemaField) CardQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Card) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Card) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) All(ret *[]Card) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) Count() (int64, error) {
	var count int64
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtEq(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtGt(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtGte(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtLt(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtLte(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreatedAtNe(createdAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("CreatedAt != ?", createdAt))
}

// CreditEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditEq(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit = ?", credit))
}

// CreditGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditGt(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit > ?", credit))
}

// CreditGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditGte(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit >= ?", credit))
}

// CreditIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditIn(credit ...int64) CardQuerySet {
	if len(credit) == 0 {
		qs.db.AddError(errors.New("must at least pass one credit in CreditIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Credit IN (?)", credit))
}

// CreditLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditLt(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit < ?", credit))
}

// CreditLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditLte(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit <= ?", credit))
}

// CreditNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditNe(credit int64) CardQuerySet {
	return qs.w(qs.db.Where("Credit != ?", credit))
}

// CreditNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) CreditNotIn(credit ...int64) CardQuerySet {
	if len(credit) == 0 {
		qs.db.AddError(errors.New("must at least pass one credit in CreditNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Credit NOT IN (?)", credit))
}

// DebitEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitEq(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit = ?", debit))
}

// DebitGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitGt(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit > ?", debit))
}

// DebitGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitGte(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit >= ?", debit))
}

// DebitIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitIn(debit ...int64) CardQuerySet {
	if len(debit) == 0 {
		qs.db.AddError(errors.New("must at least pass one debit in DebitIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Debit IN (?)", debit))
}

// DebitLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitLt(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit < ?", debit))
}

// DebitLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitLte(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit <= ?", debit))
}

// DebitNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitNe(debit int64) CardQuerySet {
	return qs.w(qs.db.Where("Debit != ?", debit))
}

// DebitNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DebitNotIn(debit ...int64) CardQuerySet {
	if len(debit) == 0 {
		qs.db.AddError(errors.New("must at least pass one debit in DebitNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Debit NOT IN (?)", debit))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) Delete() error {
	return qs.db.Delete(Card{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Card{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Card{})
	return db.RowsAffected, db.Error
}

// ExpirationDateEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateEq(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate = ?", expirationDate))
}

// ExpirationDateGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateGt(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate > ?", expirationDate))
}

// ExpirationDateGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateGte(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate >= ?", expirationDate))
}

// ExpirationDateLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateLt(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate < ?", expirationDate))
}

// ExpirationDateLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateLte(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate <= ?", expirationDate))
}

// ExpirationDateNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) ExpirationDateNe(expirationDate time.Time) CardQuerySet {
	return qs.w(qs.db.Where("ExpirationDate != ?", expirationDate))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) GetUpdater() CardUpdater {
	return NewCardUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDEq(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDGt(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDGte(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDIn(ID ...int64) CardQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ID IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDLt(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDLte(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDNe(ID int64) CardQuerySet {
	return qs.w(qs.db.Where("ID != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) IDNotIn(ID ...int64) CardQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ID NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) Limit(limit int) CardQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) Offset(offset int) CardQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs CardQuerySet) One(ret *Card) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByCreatedAt() CardQuerySet {
	return qs.w(qs.db.Order("CreatedAt ASC"))
}

// OrderAscByCredit is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByCredit() CardQuerySet {
	return qs.w(qs.db.Order("Credit ASC"))
}

// OrderAscByDebit is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByDebit() CardQuerySet {
	return qs.w(qs.db.Order("Debit ASC"))
}

// OrderAscByExpirationDate is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByExpirationDate() CardQuerySet {
	return qs.w(qs.db.Order("ExpirationDate ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByID() CardQuerySet {
	return qs.w(qs.db.Order("ID ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByStatus() CardQuerySet {
	return qs.w(qs.db.Order("Status ASC"))
}

// OrderAscByType is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByType() CardQuerySet {
	return qs.w(qs.db.Order("Type ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByUpdatedAt() CardQuerySet {
	return qs.w(qs.db.Order("UpdatedAt ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderAscByUserID() CardQuerySet {
	return qs.w(qs.db.Order("UserID ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByCreatedAt() CardQuerySet {
	return qs.w(qs.db.Order("CreatedAt DESC"))
}

// OrderDescByCredit is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByCredit() CardQuerySet {
	return qs.w(qs.db.Order("Credit DESC"))
}

// OrderDescByDebit is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByDebit() CardQuerySet {
	return qs.w(qs.db.Order("Debit DESC"))
}

// OrderDescByExpirationDate is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByExpirationDate() CardQuerySet {
	return qs.w(qs.db.Order("ExpirationDate DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByID() CardQuerySet {
	return qs.w(qs.db.Order("ID DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByStatus() CardQuerySet {
	return qs.w(qs.db.Order("Status DESC"))
}

// OrderDescByType is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByType() CardQuerySet {
	return qs.w(qs.db.Order("Type DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByUpdatedAt() CardQuerySet {
	return qs.w(qs.db.Order("UpdatedAt DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) OrderDescByUserID() CardQuerySet {
	return qs.w(qs.db.Order("UserID DESC"))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusEq(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusGt(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusGte(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusIn(status ...CardStatus) CardQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Status IN (?)", status))
}

// StatusLike is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusLike(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status LIKE ?", status))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusLt(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusLte(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusNe(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusNotIn(status ...CardStatus) CardQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Status NOT IN (?)", status))
}

// StatusNotlike is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) StatusNotlike(status CardStatus) CardQuerySet {
	return qs.w(qs.db.Where("Status NOT LIKE ?", status))
}

// TypeEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeEq(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type = ?", typeValue))
}

// TypeGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeGt(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type > ?", typeValue))
}

// TypeGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeGte(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type >= ?", typeValue))
}

// TypeIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeIn(typeValue ...CardType) CardQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Type IN (?)", typeValue))
}

// TypeLike is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeLike(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type LIKE ?", typeValue))
}

// TypeLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeLt(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type < ?", typeValue))
}

// TypeLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeLte(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type <= ?", typeValue))
}

// TypeNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeNe(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type != ?", typeValue))
}

// TypeNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeNotIn(typeValue ...CardType) CardQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Type NOT IN (?)", typeValue))
}

// TypeNotlike is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) TypeNotlike(typeValue CardType) CardQuerySet {
	return qs.w(qs.db.Where("Type NOT LIKE ?", typeValue))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtEq(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtGt(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtGte(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtLt(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtLte(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UpdatedAtNe(updatedAt time.Time) CardQuerySet {
	return qs.w(qs.db.Where("UpdatedAt != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDEq(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDGt(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDGte(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDIn(userID ...int64) CardQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("UserID IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDLt(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDLte(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDNe(userID int64) CardQuerySet {
	return qs.w(qs.db.Where("UserID != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs CardQuerySet) UserIDNotIn(userID ...int64) CardQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("UserID NOT IN (?)", userID))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetCreatedAt(createdAt time.Time) CardUpdater {
	u.fields[string(CardDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCredit is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetCredit(credit int64) CardUpdater {
	u.fields[string(CardDBSchema.Credit)] = credit
	return u
}

// SetDebit is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetDebit(debit int64) CardUpdater {
	u.fields[string(CardDBSchema.Debit)] = debit
	return u
}

// SetExpirationDate is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetExpirationDate(expirationDate time.Time) CardUpdater {
	u.fields[string(CardDBSchema.ExpirationDate)] = expirationDate
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetID(ID int64) CardUpdater {
	u.fields[string(CardDBSchema.ID)] = ID
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetStatus(status CardStatus) CardUpdater {
	u.fields[string(CardDBSchema.Status)] = status
	return u
}

// SetType is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetType(typeValue CardType) CardUpdater {
	u.fields[string(CardDBSchema.Type)] = typeValue
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetUpdatedAt(updatedAt time.Time) CardUpdater {
	u.fields[string(CardDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u CardUpdater) SetUserID(userID int64) CardUpdater {
	u.fields[string(CardDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u CardUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u CardUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set CardQuerySet

// ===== BEGIN of Card modifiers

// CardDBSchemaField describes database schema field. It requires for method 'Update'
type CardDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f CardDBSchemaField) String() string {
	return string(f)
}

// CardDBSchema stores db field names of Card
var CardDBSchema = struct {
	ID             CardDBSchemaField
	UserID         CardDBSchemaField
	Type           CardDBSchemaField
	Debit          CardDBSchemaField
	Credit         CardDBSchemaField
	ExpirationDate CardDBSchemaField
	Status         CardDBSchemaField
	CreatedAt      CardDBSchemaField
	UpdatedAt      CardDBSchemaField
}{

	ID:             CardDBSchemaField("ID"),
	UserID:         CardDBSchemaField("UserID"),
	Type:           CardDBSchemaField("Type"),
	Debit:          CardDBSchemaField("Debit"),
	Credit:         CardDBSchemaField("Credit"),
	ExpirationDate: CardDBSchemaField("ExpirationDate"),
	Status:         CardDBSchemaField("Status"),
	CreatedAt:      CardDBSchemaField("CreatedAt"),
	UpdatedAt:      CardDBSchemaField("UpdatedAt"),
}

// Update updates Card fields by primary key
// nolint: dupl
func (o *Card) Update(db *gorm.DB, fields ...CardDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"ID":             o.ID,
		"UserID":         o.UserID,
		"Type":           o.Type,
		"Debit":          o.Debit,
		"Credit":         o.Credit,
		"ExpirationDate": o.ExpirationDate,
		"Status":         o.Status,
		"CreatedAt":      o.CreatedAt,
		"UpdatedAt":      o.UpdatedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Card %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// CardUpdater is an Card updates manager
type CardUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewCardUpdater creates new Card updater
// nolint: dupl
func NewCardUpdater(db *gorm.DB) CardUpdater {
	return CardUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Card{}),
	}
}

// ===== END of Card modifiers

// ===== END of all query sets
