// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"gorm.io/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserQuerySet

// UserQuerySet is an queryset type for User
type UserQuerySet struct {
	db *gorm.DB
}

// NewUserQuerySet constructs new UserQuerySet
func NewUserQuerySet(db *gorm.DB) UserQuerySet {
	return UserQuerySet{
		db: db.Model(&User{}),
	}
}

func (qs UserQuerySet) w(db *gorm.DB) UserQuerySet {
	return NewUserQuerySet(db)
}

func (qs UserQuerySet) Select(fields ...UserDBSchemaField) UserQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *User) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *User) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) All(ret *[]User) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Count() (int64, error) {
	var count int64
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtEq(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtNe(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("CreatedAt != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Delete() error {
	return qs.db.Delete(User{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(User{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(User{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetUpdater() UserUpdater {
	return NewUserUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDEq(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGt(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGte(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDIn(ID ...int64) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ID IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLt(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLte(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNe(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("ID != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNotIn(ID ...int64) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ID NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Limit(limit int) UserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameEq(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameGt(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameGte(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameIn(name ...string) UserQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLike(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLt(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLte(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNe(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotIn(name ...string) UserQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("Name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotlike(name string) UserQuerySet {
	return qs.w(qs.db.Where("Name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Offset(offset int) UserQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserQuerySet) One(ret *User) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("CreatedAt ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByID() UserQuerySet {
	return qs.w(qs.db.Order("ID ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByName() UserQuerySet {
	return qs.w(qs.db.Order("Name ASC"))
}

// OrderAscByPasswordHash is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByPasswordHash() UserQuerySet {
	return qs.w(qs.db.Order("PasswordHash ASC"))
}

// OrderAscByPhoneNumber is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByPhoneNumber() UserQuerySet {
	return qs.w(qs.db.Order("PhoneNumber ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("UpdatedAt ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("CreatedAt DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByID() UserQuerySet {
	return qs.w(qs.db.Order("ID DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByName() UserQuerySet {
	return qs.w(qs.db.Order("Name DESC"))
}

// OrderDescByPasswordHash is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByPasswordHash() UserQuerySet {
	return qs.w(qs.db.Order("PasswordHash DESC"))
}

// OrderDescByPhoneNumber is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByPhoneNumber() UserQuerySet {
	return qs.w(qs.db.Order("PhoneNumber DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("UpdatedAt DESC"))
}

// PasswordHashEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashEq(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash = ?", passwordHash))
}

// PasswordHashGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashGt(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash > ?", passwordHash))
}

// PasswordHashGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashGte(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash >= ?", passwordHash))
}

// PasswordHashIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashIn(passwordHash ...string) UserQuerySet {
	if len(passwordHash) == 0 {
		qs.db.AddError(errors.New("must at least pass one passwordHash in PasswordHashIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("PasswordHash IN (?)", passwordHash))
}

// PasswordHashLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashLike(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash LIKE ?", passwordHash))
}

// PasswordHashLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashLt(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash < ?", passwordHash))
}

// PasswordHashLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashLte(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash <= ?", passwordHash))
}

// PasswordHashNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashNe(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash != ?", passwordHash))
}

// PasswordHashNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashNotIn(passwordHash ...string) UserQuerySet {
	if len(passwordHash) == 0 {
		qs.db.AddError(errors.New("must at least pass one passwordHash in PasswordHashNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("PasswordHash NOT IN (?)", passwordHash))
}

// PasswordHashNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordHashNotlike(passwordHash string) UserQuerySet {
	return qs.w(qs.db.Where("PasswordHash NOT LIKE ?", passwordHash))
}

// PhoneNumberEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberEq(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber = ?", phoneNumber))
}

// PhoneNumberGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberGt(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber > ?", phoneNumber))
}

// PhoneNumberGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberGte(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber >= ?", phoneNumber))
}

// PhoneNumberIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberIn(phoneNumber ...string) UserQuerySet {
	if len(phoneNumber) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNumber in PhoneNumberIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("PhoneNumber IN (?)", phoneNumber))
}

// PhoneNumberLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberLike(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber LIKE ?", phoneNumber))
}

// PhoneNumberLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberLt(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber < ?", phoneNumber))
}

// PhoneNumberLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberLte(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber <= ?", phoneNumber))
}

// PhoneNumberNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberNe(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber != ?", phoneNumber))
}

// PhoneNumberNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberNotIn(phoneNumber ...string) UserQuerySet {
	if len(phoneNumber) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNumber in PhoneNumberNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("PhoneNumber NOT IN (?)", phoneNumber))
}

// PhoneNumberNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumberNotlike(phoneNumber string) UserQuerySet {
	return qs.w(qs.db.Where("PhoneNumber NOT LIKE ?", phoneNumber))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtEq(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtNe(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("UpdatedAt != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetCreatedAt(createdAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.CreatedAt)] = createdAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetID(ID int64) UserUpdater {
	u.fields[string(UserDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetName(name string) UserUpdater {
	u.fields[string(UserDBSchema.Name)] = name
	return u
}

// SetPasswordHash is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPasswordHash(passwordHash string) UserUpdater {
	u.fields[string(UserDBSchema.PasswordHash)] = passwordHash
	return u
}

// SetPhoneNumber is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPhoneNumber(phoneNumber string) UserUpdater {
	u.fields[string(UserDBSchema.PhoneNumber)] = phoneNumber
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetUpdatedAt(updatedAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserQuerySet

// ===== BEGIN of User modifiers

// UserDBSchemaField describes database schema field. It requires for method 'Update'
type UserDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserDBSchemaField) String() string {
	return string(f)
}

// UserDBSchema stores db field names of User
var UserDBSchema = struct {
	ID           UserDBSchemaField
	Name         UserDBSchemaField
	PhoneNumber  UserDBSchemaField
	PasswordHash UserDBSchemaField
	CreatedAt    UserDBSchemaField
	UpdatedAt    UserDBSchemaField
}{

	ID:           UserDBSchemaField("ID"),
	Name:         UserDBSchemaField("Name"),
	PhoneNumber:  UserDBSchemaField("PhoneNumber"),
	PasswordHash: UserDBSchemaField("PasswordHash"),
	CreatedAt:    UserDBSchemaField("CreatedAt"),
	UpdatedAt:    UserDBSchemaField("UpdatedAt"),
}

// Update updates User fields by primary key
// nolint: dupl
func (o *User) Update(db *gorm.DB, fields ...UserDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"ID":           o.ID,
		"Name":         o.Name,
		"PhoneNumber":  o.PhoneNumber,
		"PasswordHash": o.PasswordHash,
		"CreatedAt":    o.CreatedAt,
		"UpdatedAt":    o.UpdatedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update User %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserUpdater is an User updates manager
type UserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserUpdater creates new User updater
// nolint: dupl
func NewUserUpdater(db *gorm.DB) UserUpdater {
	return UserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&User{}),
	}
}

// ===== END of User modifiers

// ===== END of all query sets
