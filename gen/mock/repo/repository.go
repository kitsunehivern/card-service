// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	"card-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// CountCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) CountCard(userID string) (int32, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountCard")
	}

	var r0 int32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int32, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int32); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(int32)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_CountCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountCard'
type MockIRepository_CountCard_Call struct {
	*mock.Call
}

// CountCard is a helper method to define mock.On call
//   - userID string
func (_e *MockIRepository_Expecter) CountCard(userID interface{}) *MockIRepository_CountCard_Call {
	return &MockIRepository_CountCard_Call{Call: _e.mock.On("CountCard", userID)}
}

func (_c *MockIRepository_CountCard_Call) Run(run func(userID string)) *MockIRepository_CountCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_CountCard_Call) Return(n int32, err error) *MockIRepository_CountCard_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIRepository_CountCard_Call) RunAndReturn(run func(userID string) (int32, error)) *MockIRepository_CountCard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) CreateCard(card *model.Card) error {
	ret := _mock.Called(card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Card) error); ok {
		r0 = returnFunc(card)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type MockIRepository_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - card *model.Card
func (_e *MockIRepository_Expecter) CreateCard(card interface{}) *MockIRepository_CreateCard_Call {
	return &MockIRepository_CreateCard_Call{Call: _e.mock.On("CreateCard", card)}
}

func (_c *MockIRepository_CreateCard_Call) Run(run func(card *model.Card)) *MockIRepository_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Card
		if args[0] != nil {
			arg0 = args[0].(*model.Card)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_CreateCard_Call) Return(err error) *MockIRepository_CreateCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_CreateCard_Call) RunAndReturn(run func(card *model.Card) error) *MockIRepository_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetCard(ID string) (*model.Card, error) {
	ret := _mock.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *model.Card
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Card, error)); ok {
		return returnFunc(ID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Card); ok {
		r0 = returnFunc(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCard'
type MockIRepository_GetCard_Call struct {
	*mock.Call
}

// GetCard is a helper method to define mock.On call
//   - ID string
func (_e *MockIRepository_Expecter) GetCard(ID interface{}) *MockIRepository_GetCard_Call {
	return &MockIRepository_GetCard_Call{Call: _e.mock.On("GetCard", ID)}
}

func (_c *MockIRepository_GetCard_Call) Run(run func(ID string)) *MockIRepository_GetCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_GetCard_Call) Return(card *model.Card, err error) *MockIRepository_GetCard_Call {
	_c.Call.Return(card, err)
	return _c
}

func (_c *MockIRepository_GetCard_Call) RunAndReturn(run func(ID string) (*model.Card, error)) *MockIRepository_GetCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) UpdateCard(card *model.Card) error {
	ret := _mock.Called(card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Card) error); ok {
		r0 = returnFunc(card)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_UpdateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCard'
type MockIRepository_UpdateCard_Call struct {
	*mock.Call
}

// UpdateCard is a helper method to define mock.On call
//   - card *model.Card
func (_e *MockIRepository_Expecter) UpdateCard(card interface{}) *MockIRepository_UpdateCard_Call {
	return &MockIRepository_UpdateCard_Call{Call: _e.mock.On("UpdateCard", card)}
}

func (_c *MockIRepository_UpdateCard_Call) Run(run func(card *model.Card)) *MockIRepository_UpdateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Card
		if args[0] != nil {
			arg0 = args[0].(*model.Card)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_UpdateCard_Call) Return(err error) *MockIRepository_UpdateCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_UpdateCard_Call) RunAndReturn(run func(card *model.Card) error) *MockIRepository_UpdateCard_Call {
	_c.Call.Return(run)
	return _c
}
