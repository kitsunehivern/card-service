// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	"card-service/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// CloseExpiredCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) CloseExpiredCard(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CloseExpiredCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_CloseExpiredCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseExpiredCard'
type MockIRepository_CloseExpiredCard_Call struct {
	*mock.Call
}

// CloseExpiredCard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) CloseExpiredCard(ctx interface{}) *MockIRepository_CloseExpiredCard_Call {
	return &MockIRepository_CloseExpiredCard_Call{Call: _e.mock.On("CloseExpiredCard", ctx)}
}

func (_c *MockIRepository_CloseExpiredCard_Call) Run(run func(ctx context.Context)) *MockIRepository_CloseExpiredCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_CloseExpiredCard_Call) Return(err error) *MockIRepository_CloseExpiredCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_CloseExpiredCard_Call) RunAndReturn(run func(ctx context.Context) error) *MockIRepository_CloseExpiredCard_Call {
	_c.Call.Return(run)
	return _c
}

// CountCardByUserID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) CountCardByUserID(ctx context.Context, userID string) (int, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountCardByUserID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_CountCardByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountCardByUserID'
type MockIRepository_CountCardByUserID_Call struct {
	*mock.Call
}

// CountCardByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIRepository_Expecter) CountCardByUserID(ctx interface{}, userID interface{}) *MockIRepository_CountCardByUserID_Call {
	return &MockIRepository_CountCardByUserID_Call{Call: _e.mock.On("CountCardByUserID", ctx, userID)}
}

func (_c *MockIRepository_CountCardByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockIRepository_CountCardByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRepository_CountCardByUserID_Call) Return(n int, err error) *MockIRepository_CountCardByUserID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIRepository_CountCardByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) (int, error)) *MockIRepository_CountCardByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCard provides a mock function for the type MockIRepository
func (_mock *MockIRepository) CreateCard(ctx context.Context, card *model.Card) error {
	ret := _mock.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Card) error); ok {
		r0 = returnFunc(ctx, card)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type MockIRepository_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - card *model.Card
func (_e *MockIRepository_Expecter) CreateCard(ctx interface{}, card interface{}) *MockIRepository_CreateCard_Call {
	return &MockIRepository_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, card)}
}

func (_c *MockIRepository_CreateCard_Call) Run(run func(ctx context.Context, card *model.Card)) *MockIRepository_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Card
		if args[1] != nil {
			arg1 = args[1].(*model.Card)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRepository_CreateCard_Call) Return(err error) *MockIRepository_CreateCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_CreateCard_Call) RunAndReturn(run func(ctx context.Context, card *model.Card) error) *MockIRepository_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardByID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetCardByID(ctx context.Context, id int64) (*model.Card, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByID")
	}

	var r0 *model.Card
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*model.Card, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *model.Card); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetCardByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByID'
type MockIRepository_GetCardByID_Call struct {
	*mock.Call
}

// GetCardByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockIRepository_Expecter) GetCardByID(ctx interface{}, id interface{}) *MockIRepository_GetCardByID_Call {
	return &MockIRepository_GetCardByID_Call{Call: _e.mock.On("GetCardByID", ctx, id)}
}

func (_c *MockIRepository_GetCardByID_Call) Run(run func(ctx context.Context, id int64)) *MockIRepository_GetCardByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRepository_GetCardByID_Call) Return(card *model.Card, err error) *MockIRepository_GetCardByID_Call {
	_c.Call.Return(card, err)
	return _c
}

func (_c *MockIRepository_GetCardByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*model.Card, error)) *MockIRepository_GetCardByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardByUserID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetCardByUserID(ctx context.Context, userID string) (*model.Card, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByUserID")
	}

	var r0 *model.Card
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Card, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Card); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetCardByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByUserID'
type MockIRepository_GetCardByUserID_Call struct {
	*mock.Call
}

// GetCardByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIRepository_Expecter) GetCardByUserID(ctx interface{}, userID interface{}) *MockIRepository_GetCardByUserID_Call {
	return &MockIRepository_GetCardByUserID_Call{Call: _e.mock.On("GetCardByUserID", ctx, userID)}
}

func (_c *MockIRepository_GetCardByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockIRepository_GetCardByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRepository_GetCardByUserID_Call) Return(card *model.Card, err error) *MockIRepository_GetCardByUserID_Call {
	_c.Call.Return(card, err)
	return _c
}

func (_c *MockIRepository_GetCardByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) (*model.Card, error)) *MockIRepository_GetCardByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCardStatus provides a mock function for the type MockIRepository
func (_mock *MockIRepository) UpdateCardStatus(ctx context.Context, id int64, status model.Status) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCardStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, model.Status) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_UpdateCardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCardStatus'
type MockIRepository_UpdateCardStatus_Call struct {
	*mock.Call
}

// UpdateCardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status model.Status
func (_e *MockIRepository_Expecter) UpdateCardStatus(ctx interface{}, id interface{}, status interface{}) *MockIRepository_UpdateCardStatus_Call {
	return &MockIRepository_UpdateCardStatus_Call{Call: _e.mock.On("UpdateCardStatus", ctx, id, status)}
}

func (_c *MockIRepository_UpdateCardStatus_Call) Run(run func(ctx context.Context, id int64, status model.Status)) *MockIRepository_UpdateCardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 model.Status
		if args[2] != nil {
			arg2 = args[2].(model.Status)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIRepository_UpdateCardStatus_Call) Return(err error) *MockIRepository_UpdateCardStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_UpdateCardStatus_Call) RunAndReturn(run func(ctx context.Context, id int64, status model.Status) error) *MockIRepository_UpdateCardStatus_Call {
	_c.Call.Return(run)
	return _c
}
