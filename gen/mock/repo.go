// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"card-service/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockICardRepo creates a new instance of MockICardRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICardRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICardRepo {
	mock := &MockICardRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockICardRepo is an autogenerated mock type for the ICardRepo type
type MockICardRepo struct {
	mock.Mock
}

type MockICardRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICardRepo) EXPECT() *MockICardRepo_Expecter {
	return &MockICardRepo_Expecter{mock: &_m.Mock}
}

// CloseExpiredCard provides a mock function for the type MockICardRepo
func (_mock *MockICardRepo) CloseExpiredCard(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CloseExpiredCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockICardRepo_CloseExpiredCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseExpiredCard'
type MockICardRepo_CloseExpiredCard_Call struct {
	*mock.Call
}

// CloseExpiredCard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockICardRepo_Expecter) CloseExpiredCard(ctx interface{}) *MockICardRepo_CloseExpiredCard_Call {
	return &MockICardRepo_CloseExpiredCard_Call{Call: _e.mock.On("CloseExpiredCard", ctx)}
}

func (_c *MockICardRepo_CloseExpiredCard_Call) Run(run func(ctx context.Context)) *MockICardRepo_CloseExpiredCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockICardRepo_CloseExpiredCard_Call) Return(err error) *MockICardRepo_CloseExpiredCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockICardRepo_CloseExpiredCard_Call) RunAndReturn(run func(ctx context.Context) error) *MockICardRepo_CloseExpiredCard_Call {
	_c.Call.Return(run)
	return _c
}

// CountCard provides a mock function for the type MockICardRepo
func (_mock *MockICardRepo) CountCard(ctx context.Context, params model.CardParams) (int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CountCard")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CardParams) (int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CardParams) int64); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.CardParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockICardRepo_CountCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountCard'
type MockICardRepo_CountCard_Call struct {
	*mock.Call
}

// CountCard is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CardParams
func (_e *MockICardRepo_Expecter) CountCard(ctx interface{}, params interface{}) *MockICardRepo_CountCard_Call {
	return &MockICardRepo_CountCard_Call{Call: _e.mock.On("CountCard", ctx, params)}
}

func (_c *MockICardRepo_CountCard_Call) Run(run func(ctx context.Context, params model.CardParams)) *MockICardRepo_CountCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.CardParams
		if args[1] != nil {
			arg1 = args[1].(model.CardParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockICardRepo_CountCard_Call) Return(n int64, err error) *MockICardRepo_CountCard_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockICardRepo_CountCard_Call) RunAndReturn(run func(ctx context.Context, params model.CardParams) (int64, error)) *MockICardRepo_CountCard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCard provides a mock function for the type MockICardRepo
func (_mock *MockICardRepo) CreateCard(ctx context.Context, card *model.Card) error {
	ret := _mock.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Card) error); ok {
		r0 = returnFunc(ctx, card)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockICardRepo_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type MockICardRepo_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - card *model.Card
func (_e *MockICardRepo_Expecter) CreateCard(ctx interface{}, card interface{}) *MockICardRepo_CreateCard_Call {
	return &MockICardRepo_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, card)}
}

func (_c *MockICardRepo_CreateCard_Call) Run(run func(ctx context.Context, card *model.Card)) *MockICardRepo_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Card
		if args[1] != nil {
			arg1 = args[1].(*model.Card)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockICardRepo_CreateCard_Call) Return(err error) *MockICardRepo_CreateCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockICardRepo_CreateCard_Call) RunAndReturn(run func(ctx context.Context, card *model.Card) error) *MockICardRepo_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCard provides a mock function for the type MockICardRepo
func (_mock *MockICardRepo) GetCard(ctx context.Context, params model.CardParams) (*model.Card, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *model.Card
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CardParams) (*model.Card, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CardParams) *model.Card); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.CardParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockICardRepo_GetCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCard'
type MockICardRepo_GetCard_Call struct {
	*mock.Call
}

// GetCard is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CardParams
func (_e *MockICardRepo_Expecter) GetCard(ctx interface{}, params interface{}) *MockICardRepo_GetCard_Call {
	return &MockICardRepo_GetCard_Call{Call: _e.mock.On("GetCard", ctx, params)}
}

func (_c *MockICardRepo_GetCard_Call) Run(run func(ctx context.Context, params model.CardParams)) *MockICardRepo_GetCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.CardParams
		if args[1] != nil {
			arg1 = args[1].(model.CardParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockICardRepo_GetCard_Call) Return(card *model.Card, err error) *MockICardRepo_GetCard_Call {
	_c.Call.Return(card, err)
	return _c
}

func (_c *MockICardRepo_GetCard_Call) RunAndReturn(run func(ctx context.Context, params model.CardParams) (*model.Card, error)) *MockICardRepo_GetCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCardStatus provides a mock function for the type MockICardRepo
func (_mock *MockICardRepo) UpdateCardStatus(ctx context.Context, params model.CardParams, status model.CardStatus) error {
	ret := _mock.Called(ctx, params, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCardStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CardParams, model.CardStatus) error); ok {
		r0 = returnFunc(ctx, params, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockICardRepo_UpdateCardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCardStatus'
type MockICardRepo_UpdateCardStatus_Call struct {
	*mock.Call
}

// UpdateCardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CardParams
//   - status model.CardStatus
func (_e *MockICardRepo_Expecter) UpdateCardStatus(ctx interface{}, params interface{}, status interface{}) *MockICardRepo_UpdateCardStatus_Call {
	return &MockICardRepo_UpdateCardStatus_Call{Call: _e.mock.On("UpdateCardStatus", ctx, params, status)}
}

func (_c *MockICardRepo_UpdateCardStatus_Call) Run(run func(ctx context.Context, params model.CardParams, status model.CardStatus)) *MockICardRepo_UpdateCardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.CardParams
		if args[1] != nil {
			arg1 = args[1].(model.CardParams)
		}
		var arg2 model.CardStatus
		if args[2] != nil {
			arg2 = args[2].(model.CardStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockICardRepo_UpdateCardStatus_Call) Return(err error) *MockICardRepo_UpdateCardStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockICardRepo_UpdateCardStatus_Call) RunAndReturn(run func(ctx context.Context, params model.CardParams, status model.CardStatus) error) *MockICardRepo_UpdateCardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserRepo creates a new instance of MockIUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepo {
	mock := &MockIUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserRepo is an autogenerated mock type for the IUserRepo type
type MockIUserRepo struct {
	mock.Mock
}

type MockIUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepo) EXPECT() *MockIUserRepo_Expecter {
	return &MockIUserRepo_Expecter{mock: &_m.Mock}
}

// CountUser provides a mock function for the type MockIUserRepo
func (_mock *MockIUserRepo) CountUser(ctx context.Context, params model.UserParams) (int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CountUser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserParams) (int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserParams) int64); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepo_CountUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUser'
type MockIUserRepo_CountUser_Call struct {
	*mock.Call
}

// CountUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.UserParams
func (_e *MockIUserRepo_Expecter) CountUser(ctx interface{}, params interface{}) *MockIUserRepo_CountUser_Call {
	return &MockIUserRepo_CountUser_Call{Call: _e.mock.On("CountUser", ctx, params)}
}

func (_c *MockIUserRepo_CountUser_Call) Run(run func(ctx context.Context, params model.UserParams)) *MockIUserRepo_CountUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserParams
		if args[1] != nil {
			arg1 = args[1].(model.UserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepo_CountUser_Call) Return(n int64, err error) *MockIUserRepo_CountUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIUserRepo_CountUser_Call) RunAndReturn(run func(ctx context.Context, params model.UserParams) (int64, error)) *MockIUserRepo_CountUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockIUserRepo
func (_mock *MockIUserRepo) CreateUser(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIUserRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockIUserRepo_Expecter) CreateUser(ctx interface{}, user interface{}) *MockIUserRepo_CreateUser_Call {
	return &MockIUserRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockIUserRepo_CreateUser_Call) Run(run func(ctx context.Context, user *model.User)) *MockIUserRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepo_CreateUser_Call) Return(err error) *MockIUserRepo_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepo_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockIUserRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPasswordHash provides a mock function for the type MockIUserRepo
func (_mock *MockIUserRepo) GetUserPasswordHash(ctx context.Context, params model.UserParams) (string, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPasswordHash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserParams) (string, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserParams) string); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepo_GetUserPasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPasswordHash'
type MockIUserRepo_GetUserPasswordHash_Call struct {
	*mock.Call
}

// GetUserPasswordHash is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.UserParams
func (_e *MockIUserRepo_Expecter) GetUserPasswordHash(ctx interface{}, params interface{}) *MockIUserRepo_GetUserPasswordHash_Call {
	return &MockIUserRepo_GetUserPasswordHash_Call{Call: _e.mock.On("GetUserPasswordHash", ctx, params)}
}

func (_c *MockIUserRepo_GetUserPasswordHash_Call) Run(run func(ctx context.Context, params model.UserParams)) *MockIUserRepo_GetUserPasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserParams
		if args[1] != nil {
			arg1 = args[1].(model.UserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepo_GetUserPasswordHash_Call) Return(s string, err error) *MockIUserRepo_GetUserPasswordHash_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIUserRepo_GetUserPasswordHash_Call) RunAndReturn(run func(ctx context.Context, params model.UserParams) (string, error)) *MockIUserRepo_GetUserPasswordHash_Call {
	_c.Call.Return(run)
	return _c
}
