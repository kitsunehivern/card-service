// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: card.proto

package cardpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardService_RequestCard_FullMethodName  = "/main.CardService/RequestCard"
	CardService_ActivateCard_FullMethodName = "/main.CardService/ActivateCard"
	CardService_BlockCard_FullMethodName    = "/main.CardService/BlockCard"
	CardService_UnblockCard_FullMethodName  = "/main.CardService/UnblockCard"
	CardService_RetireCard_FullMethodName   = "/main.CardService/RetireCard"
	CardService_CloseCard_FullMethodName    = "/main.CardService/CloseCard"
	CardService_GetCard_FullMethodName      = "/main.CardService/GetCard"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	RequestCard(ctx context.Context, in *RequestCardRequest, opts ...grpc.CallOption) (*RequestCardResponse, error)
	ActivateCard(ctx context.Context, in *ActivateCardRequest, opts ...grpc.CallOption) (*ActivateCardResponse, error)
	BlockCard(ctx context.Context, in *BlockCardRequest, opts ...grpc.CallOption) (*BlockCardResponse, error)
	UnblockCard(ctx context.Context, in *UnblockCardRequest, opts ...grpc.CallOption) (*UnblockCardResponse, error)
	RetireCard(ctx context.Context, in *RetireCardRequest, opts ...grpc.CallOption) (*RetireCardResponse, error)
	CloseCard(ctx context.Context, in *CloseCardRequest, opts ...grpc.CallOption) (*CloseCardResponse, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) RequestCard(ctx context.Context, in *RequestCardRequest, opts ...grpc.CallOption) (*RequestCardResponse, error) {
	out := new(RequestCardResponse)
	err := c.cc.Invoke(ctx, CardService_RequestCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ActivateCard(ctx context.Context, in *ActivateCardRequest, opts ...grpc.CallOption) (*ActivateCardResponse, error) {
	out := new(ActivateCardResponse)
	err := c.cc.Invoke(ctx, CardService_ActivateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) BlockCard(ctx context.Context, in *BlockCardRequest, opts ...grpc.CallOption) (*BlockCardResponse, error) {
	out := new(BlockCardResponse)
	err := c.cc.Invoke(ctx, CardService_BlockCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UnblockCard(ctx context.Context, in *UnblockCardRequest, opts ...grpc.CallOption) (*UnblockCardResponse, error) {
	out := new(UnblockCardResponse)
	err := c.cc.Invoke(ctx, CardService_UnblockCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RetireCard(ctx context.Context, in *RetireCardRequest, opts ...grpc.CallOption) (*RetireCardResponse, error) {
	out := new(RetireCardResponse)
	err := c.cc.Invoke(ctx, CardService_RetireCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CloseCard(ctx context.Context, in *CloseCardRequest, opts ...grpc.CallOption) (*CloseCardResponse, error) {
	out := new(CloseCardResponse)
	err := c.cc.Invoke(ctx, CardService_CloseCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, CardService_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	RequestCard(context.Context, *RequestCardRequest) (*RequestCardResponse, error)
	ActivateCard(context.Context, *ActivateCardRequest) (*ActivateCardResponse, error)
	BlockCard(context.Context, *BlockCardRequest) (*BlockCardResponse, error)
	UnblockCard(context.Context, *UnblockCardRequest) (*UnblockCardResponse, error)
	RetireCard(context.Context, *RetireCardRequest) (*RetireCardResponse, error)
	CloseCard(context.Context, *CloseCardRequest) (*CloseCardResponse, error)
	GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) RequestCard(context.Context, *RequestCardRequest) (*RequestCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCard not implemented")
}
func (UnimplementedCardServiceServer) ActivateCard(context.Context, *ActivateCardRequest) (*ActivateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCard not implemented")
}
func (UnimplementedCardServiceServer) BlockCard(context.Context, *BlockCardRequest) (*BlockCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockCard not implemented")
}
func (UnimplementedCardServiceServer) UnblockCard(context.Context, *UnblockCardRequest) (*UnblockCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockCard not implemented")
}
func (UnimplementedCardServiceServer) RetireCard(context.Context, *RetireCardRequest) (*RetireCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetireCard not implemented")
}
func (UnimplementedCardServiceServer) CloseCard(context.Context, *CloseCardRequest) (*CloseCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCard not implemented")
}
func (UnimplementedCardServiceServer) GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_RequestCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RequestCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_RequestCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RequestCard(ctx, req.(*RequestCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ActivateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ActivateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_ActivateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ActivateCard(ctx, req.(*ActivateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_BlockCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).BlockCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_BlockCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).BlockCard(ctx, req.(*BlockCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UnblockCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UnblockCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_UnblockCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UnblockCard(ctx, req.(*UnblockCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RetireCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetireCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RetireCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_RetireCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RetireCard(ctx, req.(*RetireCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CloseCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CloseCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_CloseCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CloseCard(ctx, req.(*CloseCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCard",
			Handler:    _CardService_RequestCard_Handler,
		},
		{
			MethodName: "ActivateCard",
			Handler:    _CardService_ActivateCard_Handler,
		},
		{
			MethodName: "BlockCard",
			Handler:    _CardService_BlockCard_Handler,
		},
		{
			MethodName: "UnblockCard",
			Handler:    _CardService_UnblockCard_Handler,
		},
		{
			MethodName: "RetireCard",
			Handler:    _CardService_RetireCard_Handler,
		},
		{
			MethodName: "CloseCard",
			Handler:    _CardService_CloseCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _CardService_GetCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card.proto",
}
