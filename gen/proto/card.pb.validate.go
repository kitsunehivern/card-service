// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: card.proto

package cardpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Card) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Card with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CardMultiError, or nil if none found.
func (m *Card) ValidateAll() error {
	return m.validate(true)
}

func (m *Card) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Debit

	// no validation rules for Credit

	// no validation rules for ExpirationDate

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CardMultiError(errors)
	}

	return nil
}

// CardMultiError is an error wrapping multiple validation errors returned by
// Card.ValidateAll() if the designated constraints aren't met.
type CardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardMultiError) AllErrors() []error { return m }

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}

// Validate checks the field values on RequestCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCardRequestMultiError, or nil if none found.
func (m *RequestCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RequestCardRequestMultiError(errors)
	}

	return nil
}

// RequestCardRequestMultiError is an error wrapping multiple validation errors
// returned by RequestCardRequest.ValidateAll() if the designated constraints
// aren't met.
type RequestCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCardRequestMultiError) AllErrors() []error { return m }

// RequestCardRequestValidationError is the validation error returned by
// RequestCardRequest.Validate if the designated constraints aren't met.
type RequestCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCardRequestValidationError) ErrorName() string {
	return "RequestCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCardRequestValidationError{}

// Validate checks the field values on RequestCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCardResponseMultiError, or nil if none found.
func (m *RequestCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestCardResponseMultiError(errors)
	}

	return nil
}

// RequestCardResponseMultiError is an error wrapping multiple validation
// errors returned by RequestCardResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCardResponseMultiError) AllErrors() []error { return m }

// RequestCardResponseValidationError is the validation error returned by
// RequestCardResponse.Validate if the designated constraints aren't met.
type RequestCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCardResponseValidationError) ErrorName() string {
	return "RequestCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCardResponseValidationError{}

// Validate checks the field values on ActivateCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateCardRequestMultiError, or nil if none found.
func (m *ActivateCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ActivateCardRequestMultiError(errors)
	}

	return nil
}

// ActivateCardRequestMultiError is an error wrapping multiple validation
// errors returned by ActivateCardRequest.ValidateAll() if the designated
// constraints aren't met.
type ActivateCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateCardRequestMultiError) AllErrors() []error { return m }

// ActivateCardRequestValidationError is the validation error returned by
// ActivateCardRequest.Validate if the designated constraints aren't met.
type ActivateCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateCardRequestValidationError) ErrorName() string {
	return "ActivateCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateCardRequestValidationError{}

// Validate checks the field values on ActivateCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateCardResponseMultiError, or nil if none found.
func (m *ActivateCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivateCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivateCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivateCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivateCardResponseMultiError(errors)
	}

	return nil
}

// ActivateCardResponseMultiError is an error wrapping multiple validation
// errors returned by ActivateCardResponse.ValidateAll() if the designated
// constraints aren't met.
type ActivateCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateCardResponseMultiError) AllErrors() []error { return m }

// ActivateCardResponseValidationError is the validation error returned by
// ActivateCardResponse.Validate if the designated constraints aren't met.
type ActivateCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateCardResponseValidationError) ErrorName() string {
	return "ActivateCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateCardResponseValidationError{}

// Validate checks the field values on BlockCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BlockCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockCardRequestMultiError, or nil if none found.
func (m *BlockCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BlockCardRequestMultiError(errors)
	}

	return nil
}

// BlockCardRequestMultiError is an error wrapping multiple validation errors
// returned by BlockCardRequest.ValidateAll() if the designated constraints
// aren't met.
type BlockCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockCardRequestMultiError) AllErrors() []error { return m }

// BlockCardRequestValidationError is the validation error returned by
// BlockCardRequest.Validate if the designated constraints aren't met.
type BlockCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockCardRequestValidationError) ErrorName() string { return "BlockCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e BlockCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockCardRequestValidationError{}

// Validate checks the field values on BlockCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BlockCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockCardResponseMultiError, or nil if none found.
func (m *BlockCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlockCardResponseMultiError(errors)
	}

	return nil
}

// BlockCardResponseMultiError is an error wrapping multiple validation errors
// returned by BlockCardResponse.ValidateAll() if the designated constraints
// aren't met.
type BlockCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockCardResponseMultiError) AllErrors() []error { return m }

// BlockCardResponseValidationError is the validation error returned by
// BlockCardResponse.Validate if the designated constraints aren't met.
type BlockCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockCardResponseValidationError) ErrorName() string {
	return "BlockCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockCardResponseValidationError{}

// Validate checks the field values on UnblockCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnblockCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockCardRequestMultiError, or nil if none found.
func (m *UnblockCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnblockCardRequestMultiError(errors)
	}

	return nil
}

// UnblockCardRequestMultiError is an error wrapping multiple validation errors
// returned by UnblockCardRequest.ValidateAll() if the designated constraints
// aren't met.
type UnblockCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockCardRequestMultiError) AllErrors() []error { return m }

// UnblockCardRequestValidationError is the validation error returned by
// UnblockCardRequest.Validate if the designated constraints aren't met.
type UnblockCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockCardRequestValidationError) ErrorName() string {
	return "UnblockCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnblockCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockCardRequestValidationError{}

// Validate checks the field values on UnblockCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnblockCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockCardResponseMultiError, or nil if none found.
func (m *UnblockCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnblockCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnblockCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnblockCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnblockCardResponseMultiError(errors)
	}

	return nil
}

// UnblockCardResponseMultiError is an error wrapping multiple validation
// errors returned by UnblockCardResponse.ValidateAll() if the designated
// constraints aren't met.
type UnblockCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockCardResponseMultiError) AllErrors() []error { return m }

// UnblockCardResponseValidationError is the validation error returned by
// UnblockCardResponse.Validate if the designated constraints aren't met.
type UnblockCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockCardResponseValidationError) ErrorName() string {
	return "UnblockCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnblockCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockCardResponseValidationError{}

// Validate checks the field values on RetireCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RetireCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetireCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetireCardRequestMultiError, or nil if none found.
func (m *RetireCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetireCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RetireCardRequestMultiError(errors)
	}

	return nil
}

// RetireCardRequestMultiError is an error wrapping multiple validation errors
// returned by RetireCardRequest.ValidateAll() if the designated constraints
// aren't met.
type RetireCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetireCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetireCardRequestMultiError) AllErrors() []error { return m }

// RetireCardRequestValidationError is the validation error returned by
// RetireCardRequest.Validate if the designated constraints aren't met.
type RetireCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetireCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetireCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetireCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetireCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetireCardRequestValidationError) ErrorName() string {
	return "RetireCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetireCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetireCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetireCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetireCardRequestValidationError{}

// Validate checks the field values on RetireCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetireCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetireCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetireCardResponseMultiError, or nil if none found.
func (m *RetireCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetireCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetireCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetireCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetireCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetireCardResponseMultiError(errors)
	}

	return nil
}

// RetireCardResponseMultiError is an error wrapping multiple validation errors
// returned by RetireCardResponse.ValidateAll() if the designated constraints
// aren't met.
type RetireCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetireCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetireCardResponseMultiError) AllErrors() []error { return m }

// RetireCardResponseValidationError is the validation error returned by
// RetireCardResponse.Validate if the designated constraints aren't met.
type RetireCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetireCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetireCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetireCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetireCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetireCardResponseValidationError) ErrorName() string {
	return "RetireCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetireCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetireCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetireCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetireCardResponseValidationError{}

// Validate checks the field values on CloseCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloseCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseCardRequestMultiError, or nil if none found.
func (m *CloseCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CloseCardRequestMultiError(errors)
	}

	return nil
}

// CloseCardRequestMultiError is an error wrapping multiple validation errors
// returned by CloseCardRequest.ValidateAll() if the designated constraints
// aren't met.
type CloseCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseCardRequestMultiError) AllErrors() []error { return m }

// CloseCardRequestValidationError is the validation error returned by
// CloseCardRequest.Validate if the designated constraints aren't met.
type CloseCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseCardRequestValidationError) ErrorName() string { return "CloseCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e CloseCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseCardRequestValidationError{}

// Validate checks the field values on CloseCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloseCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseCardResponseMultiError, or nil if none found.
func (m *CloseCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloseCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloseCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloseCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloseCardResponseMultiError(errors)
	}

	return nil
}

// CloseCardResponseMultiError is an error wrapping multiple validation errors
// returned by CloseCardResponse.ValidateAll() if the designated constraints
// aren't met.
type CloseCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseCardResponseMultiError) AllErrors() []error { return m }

// CloseCardResponseValidationError is the validation error returned by
// CloseCardResponse.Validate if the designated constraints aren't met.
type CloseCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseCardResponseValidationError) ErrorName() string {
	return "CloseCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseCardResponseValidationError{}

// Validate checks the field values on GetCardRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCardRequestMultiError,
// or nil if none found.
func (m *GetCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCardRequestMultiError(errors)
	}

	return nil
}

// GetCardRequestMultiError is an error wrapping multiple validation errors
// returned by GetCardRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardRequestMultiError) AllErrors() []error { return m }

// GetCardRequestValidationError is the validation error returned by
// GetCardRequest.Validate if the designated constraints aren't met.
type GetCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardRequestValidationError) ErrorName() string { return "GetCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardRequestValidationError{}

// Validate checks the field values on GetCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardResponseMultiError, or nil if none found.
func (m *GetCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCardResponseMultiError(errors)
	}

	return nil
}

// GetCardResponseMultiError is an error wrapping multiple validation errors
// returned by GetCardResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardResponseMultiError) AllErrors() []error { return m }

// GetCardResponseValidationError is the validation error returned by
// GetCardResponse.Validate if the designated constraints aren't met.
type GetCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardResponseValidationError) ErrorName() string { return "GetCardResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardResponseValidationError{}
